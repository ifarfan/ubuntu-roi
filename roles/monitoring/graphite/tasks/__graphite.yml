---
# Install pre-requisites
- name: Install pre-requisite packages
  apt:  pkg={{ item }} state=present
  with_items:
     - python-dev
     - python-cairo-dev
     - python-django
     - python-ldap
     - python-memcache
  notify:
     - flush cached-memory
     - run updatedb
  tags: graphite

- name: Install pip dependencies
  pip:  name={{ item }}
  with_items:
     - Django==1.4.14
     - django-tagging==0.3.2
     - Twisted==11.1.0
  notify:
     - flush cached-memory
     - run updatedb
  tags: graphite


# Install Graphite Core
- name: Install pip graphite packages
  pip:  name={{ item }}
  with_items:
     - carbon
     - whisper==0.9.12
     - graphite-web
  notify:
     - flush cached-memory
     - run updatedb
  tags: graphite


# Copy Graphite configs
- name: Copy Graphite configs
  copy: src={{ files_dir }}/opt/graphite/{{ item }} dest=/opt/graphite/{{ item }} owner=root group=root mode=0644 backup=yes
  with_items:
     - conf/carbon.conf
     - conf/graphite.wsgi
     - conf/storage-schemas.conf
     - conf/storage-aggregation.conf
  notify:
     - reload carbon-cache
     - run updatedb
  tags:
     - graphite-configs
     - graphite

- name: Copy local_settings.py
  template: src={{ files_dir }}/opt/graphite/webapp/graphite/local_settings.py.j2 dest=/opt/graphite/webapp/graphite/local_settings.py owner=root group=root mode=0644
  notify:
     - reload carbon-cache
     - run updatedb
  tags:
     - graphite-configs
     - graphite


# Graphite DB Install
- name: MySQL create graphite db
  shell: "mysql -e \"CREATE DATABASE IF NOT EXISTS {{ graphite_sql_db }};\""
  ignore_errors: yes
  tags: graphite

- name: MySQL create graphite username
  shell: "mysql -e \"GRANT USAGE ON *.* TO '{{ graphite_sql_usr }}'@'localhost' IDENTIFIED BY '{{ graphite_sql_pwd }}';\""
  ignore_errors: yes
  tags: graphite

- name: MySQL grant rights to graphite user
  shell: "mysql -e \"GRANT ALL PRIVILEGES ON {{ graphite_sql_db }}.* TO '{{ graphite_sql_usr }}'@'localhost';\""
  ignore_errors: yes
  tags: graphite

- name: Check if database is empty
  shell: "mysql -e \"SELECT uuu.username FROM {{ graphite_sql_db }}.auth_user AS uuu WHERE uuu.username='{{ graphite_sql_usr }}';\""
  ignore_errors: yes
  register: db_populated
  tags:
     - db-install
     - graphite

- name: Populate database
  shell: /usr/bin/python manage.py syncdb --noinput chdir=/opt/graphite/webapp/graphite/ executable=/bin/bash
  ignore_errors: yes
  when: db_populated.stdout.find('{{ graphite_sql_usr }}') == -1
  tags:
     - db-install
     - graphite


# Enable init.d daemon
- name: Copy Carbon init.d script
  copy: src={{ files_dir }}/etc/init.d/carbon-cache dest=/etc/init.d/ owner=root group=root mode=0755 backup=no
  notify:
     - reload carbon-cache
     - run updatedb
  tags:
     - graphite-configs
     - graphite

- name: Enable Carbon init.d daemon
  command: /usr/sbin/sysv-rc-conf carbon-cache on creates=/etc/rc2.d/S20carbon-cache
  notify:
     - reload carbon-cache
     - run updatedb
  tags:
     - graphite-configs
     - graphite


# Enable Apache fronting
- name: Install Apache Python libs
  apt:  pkg={{ item }} state=present
  with_items:
     - libapache2-mod-wsgi
     - libapache2-mod-python
  notify:
     - reload apache
     - flush cached-memory
     - run updatedb
  tags:
     - apache
     - graphite

- name: Create wsgi folder
  file: path=/var/run/apache2/wsgi state=directory owner=www-data group=root mode=0755 recurse=yes
  notify:
     - reload apache
     - run updatedb
  tags:
     - apache
     - graphite

- name: Grant Apache access to storage files
  file: path=/opt/graphite/storage state=directory owner=www-data group=www-data mode=0755 recurse=yes
  notify:
     - reload apache
     - run updatedb
  tags:
     - apache
     - graphite

- name: Copy Graphite Apache conf
  copy: src={{ files_dir }}/etc/apache2/sites-available/graphite dest=/etc/apache2/sites-available/ owner=root group=root mode=0644 backup=no
  notify:
     - reload apache
     - run updatedb
  tags:
     - apache
     - graphite-configs
     - graphite

- name: Enable Graphite site
  command: /usr/sbin/a2ensite graphite creates=/etc/apache2/sites-enabled/graphite
  notify:
     - reload apache
     - run updatedb
  tags:
     - apache
     - graphite


# Copy and enable monit check
- name: Copy and enable monit check
  copy: src={{ files_dir }}/etc/monit/conf.d/carbon-cache.conf dest=/etc/monit/conf.d/ owner=root group=root mode=0644 backup=no
  notify:
     - reload monit
     - run updatedb
  tags:
     - monit
     - graphite


# Enable CollectD listening bridge
- name: Copy collectd network_server.conf
  template: src={{ files_dir }}/etc/collectd/conf.d/network_server.conf.j2 dest=/etc/collectd/conf.d/network_server.conf owner=root group=root mode=0644
  notify:
     - reload collectd
     - run updatedb
  tags:
     - collectd
     - graphite-configs
     - graphite

- name: Enable collectd listening bridge
  copy: src={{ files_dir }}/etc/collectd/conf.d/graphite.conf dest=/etc/collectd/conf.d/ owner=root group=root mode=0644 backup=no
  notify:
     - reload collectd
     - run updatedb
  tags:
     - collectd
     - graphite-configs
     - graphite
